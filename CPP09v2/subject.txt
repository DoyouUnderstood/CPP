Exercice 00 : Bitcoin Exchange

    But : Créer un programme btc qui calcule la valeur d’une quantité de bitcoins pour une date donnée, en se basant sur une base de données CSV de taux historiques.

    Exigences principales :
        Utiliser au moins un conteneur STL.
        Lire un fichier d’entrée au format : date | valeur.
        Si la date n’est pas présente, utiliser la date précédente la plus proche dans la base de données.
        Gérer les erreurs d’entrée :
            Format de date invalide.
            Valeur non positive ou hors de l’intervalle [0, 1000].
        Afficher les résultats avec les erreurs explicites.
        Soumettre un Makefile conforme.

    Exemple d’entrée : input.txt

date | value
2011-01-03 | 3
2011-01-03 | 2
2011-01-03 | 1
2011-01-03 | 1.2
2011-01-09 | 1
2012-01-11 | -1
2001-42-42
2012-01-11 | 1
2012-01-11 | 2147483648

Exemple de sortie :

    $> ./btc
    Error: could not open file.

    $> ./btc input.txt
    2011-01-03 => 3 = 0.9
    2011-01-03 => 2 = 0.6
    2011-01-03 => 1 = 0.3
    2011-01-03 => 1.2 = 0.36
    2011-01-09 => 1 = 0.32
    Error: not a positive number.
    Error: bad input => 2001-42-42
    2012-01-11 => 1 = 7.1
    Error: too large a number.

Exercice 01 : Reverse Polish Notation (RPN)

    But : Créer un programme RPN qui évalue une expression mathématique en notation polonaise inversée.

    Exigences principales :
        Utiliser au moins un conteneur STL.
        Gérer les opérations avec les opérateurs : +, -, *, /.
        Les chiffres transmis en argument sont toujours inférieurs à 10.
        Gérer les erreurs d’entrée et afficher des messages explicites.
        Aucun besoin de traiter les parenthèses ou nombres décimaux.
        Soumettre un Makefile conforme.

    Exemple d’entrée :
        Argument : "8 9 * 9 - 9 - 9 - 4 - 1 +".

    Exemple de sortie :

    $> ./RPN "8 9 * 9 - 9 - 9 - 4 - 1 +"
    42

    $> ./RPN "7 7 * 7 -"
    42

    $> ./RPN "1 2 * 2 / 2 * 2 4 - +"
    0

    $> ./RPN "(1 + 1)"
    Error

Exercice 02 : PmergeMe

    But : Implémenter un programme PmergeMe qui trie une séquence d’entiers positifs en utilisant l’algorithme Ford-Johnson (merge-insert sort).

    Exigences principales :
        Utiliser deux conteneurs STL distincts.
        Le programme doit être capable de gérer une séquence contenant jusqu’à 3000 entiers.
        Afficher :
            La séquence d’origine.
            La séquence triée.
            Le temps de traitement pour chaque conteneur.
        Implémenter un tri spécifique pour chaque conteneur utilisé (pas de fonction générique).
        Gérer les erreurs d’entrée (entiers négatifs, doublons, etc.).
        Soumettre un Makefile conforme.

    Exemple d’entrée :
        Arguments : 3 5 9 7 4.

    Exemple de sortie :

    $> ./PmergeMe 3 5 9 7 4
    Before: 3 5 9 7 4
    After: 3 4 5 7 9
    Time to process a range of 5 elements with std::vector : 0.00031 us
    Time to process a range of 5 elements with std::deque : 0.00014 us

    $> ./PmergeMe `shuf -i 1-100000 -n 3000 | tr "\n" " "`
    Before: 141 79 526 321 [...]
    After: 79 141 321 526 [...]
    Time to process a range of 3000 elements with std::list : 62.14389 us
    Time to process a range of 3000 elements with std::vector : 69.27212 us

    $> ./PmergeMe "-1" "2"
    Error

Règles générales du module :

    Utilisation obligatoire des conteneurs STL :
        Chaque conteneur ne peut être utilisé qu'une seule fois.
    Makefile conforme :
        Indicateurs requis : -Wall, -Wextra, -Werror.
        Règles nécessaires : $(NAME), all, clean, fclean, re.
    Respecter les consignes de validation :
        Formats d’entrée spécifiques.
        Gestion des erreurs avec des messages clairs.
    Lire le sujet en entier avant de commencer.